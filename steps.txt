PROJECT STEPS
-------------
(project created under Ubuntu 22.04, with Laravel 11.0.4, php 8.3, mysql 8.0.36)

-create new laravel project
    -run "composer create-project laravel/laravel lara_rest_api"

-create database
    (-you can use whatever you want, e.g. phpmyadmin, mysql cli, etc. i'll use mysql cli)
    -enter mysql cli by running "mysql -u root" (or whatever mysql user you use instead of root)
    -make sure your mysql's default storage engine is InnoDB. e.g. run "SHOW ENGINES;" (for InnoDB you should have DEFAULT in the Suport column)
    -run "CREATE DATABASE lara_rest_api CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;"

-configure the db
    -open .env, set "APP_NAME=Lara_REST_API" and "DB_DATABASE=lara_rest_api"

-run initial migration
    -run "php artisan migrate" in the project folder
    (
        -when i 1st ran the command, i got an error, "SQLSTATE[HY000] [1698] Access denied for user 'root'@'localhost' [...]". it was because i just 
        did a fresh install of mysql in ubuntu(well, of everything, i just set up my ubuntu OS, but the fresh mysql install caused this), and i was 
        using the default 'root' mysql user, which, upon a fresh install uses 'auth_socket' as authentication method(more info about this here 
        https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-22-04) - it's a situation where running "mysql -u root -p" 
        doesn't work, you have to use "sudo mysql -u root -p" because 'root' also needs your ubuntu user's password, because of 'auth_socket'
            -to check this, enter the mysql cli with "sudo mysql -u root -p", then run, "show databases;", "use mysql;", "show tables;", 
            "select * from user where User='root'\G;" - here you can see 'plugin: auth_socket'; (\G is for formatting the query result)
        -to fix this, i used the 1st answer from https://askubuntu.com/questions/998920/1698-access-denied-for-user-rootlocalhost-mysql-5-7-and-ubuntu-16-04 - specifically, i ran: 
            mysql> USE mysql;
            mysql> UPDATE user SET plugin='mysql_native_password' WHERE User='root';
            mysql> FLUSH PRIVILEGES;
            mysql> exit;
        -then i was able to run "php artisan migrate";
    )

-Album model & migration
    -make model & migration "php artisan make:model Album --migration"
    -write migration
    -"php artisan migrate"

-ImageManipulation model & migration
    -make model & migration "php artisan make:model ImageManipulation --migration"
    -write migration
    -"php artisan migrate"

-updated "albums" table
    -"php artisan make:migration update_albums_table --table=albums"
    -added unique() index

-added postman_collection.json

-Album CRUD
    -"php artisan make:controller AlbumController --api --model=Album --requests"
    -write validation rules in the app/Http/Requests files
    -discovered that Laravel 11 does not have routes/api.php (i.e. API development support) by default (https://laraveldaily.com/post/laravel-11-main-new-features-changes ,
    https://laravel.com/docs/11.x/releases#laravel-11) - nor does it have Sanctum pre-installed anymore, which we'll use later on.
        -ran "php artisan install:api" 
            -"Create an API routes file and install Laravel Sanctum or Laravel Passport" - by default it installs Sanctum,
        which is what i need for the tutorial (p.s. run "php artisan install:api --help" to see how to install Passport instead)
            -"INFO  API scaffolding installed. Please add the [Laravel\Sanctum\HasApiTokens] trait to your User model." - did that
    -added AlbumController routes in routes/api.php
    -added "protected $fillable" in app/Models/Album.php for mass assignment
    -implemented AlbumController methods

-API versioning & API resources (for Album model)
    -added V1 prefix to the AlbumController routes
        -also correct AlbumController path in routes, "use App\Http\Controllers\V1\AlbumController"
    -added V1 folder  under app/Http/Controllers, moved AlbumController there, make required path corrections(for "namespace" & "use" instructions)
    -"php artisan make:resources V1/AlbumResource"
    -implemented AlbumResource, edited AlbumController to use it

-ImageManipulation CRUD + API resource
    -"php artisan make:controller V1/ImageManipulationController --api --model=ImageManipulation --requests"
    -"php artisan make:resource V1/ImageManipulationResource"
    -we won't implement support for updating ImageManipulation so i:
        -deleted app/Http/Requests/UpdateImageManipulationRequest.php
        -deleted update() from app/Http/Controllers/V1/ImageManipulationController.php
    -we won't implement support for storing ImageManipulation, but for resizing an image so i:
        -renamed store() from app/Http/Controllers/V1/ImageManipulationController.php to resize()
        -renamed app/Http/Requests/StoreImageManipulationRequest.php to app/Http/Requests/ResizeImageRequest.php
            -also renamed the actual class inside the file, and its usage in ImageManipulationController's resize()
    -added routes in routes/api.php
        -also added a "get images by album" route and getByAlbum() for it in ImageManipulationController
    -implement ImageManipulationController's resize()
        -apart from the commited mods, i also ran "composer require intervention/image:^2" (https://image.intervention.io/v2/introduction/installation)
    -implemented all the ImageManipulationController functions

-API rate limiting

-








TODO
----
-remove the tmp nullable() from album and image_manipulations migrations
-add foreign key constraints
    -also add validation rule? no need - 1) i ignore any possible user_id provided by a malicious user by using $request->validated() instead of $request->all() AND not making a 
    user_id validation rule and 2) i'll then add the logged in user's id to the validated data array in the controller action
-add unique(user_id, name) validation for album (for a nice error message, to not display the sql error message)
-maybe add unique index(es) to ImageManipulation migration too